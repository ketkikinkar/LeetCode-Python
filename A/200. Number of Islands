"""
200. Number of Islands
Solved
Medium
Topics
Companies
Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'."""

# SOLUTION:

"""class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0
        row, col = len(grid), len(grid[0])
        visit = set()
        result = 0

        def bfs(r,c):
            visit.add((r,c))
            q = collections.deque()
            q.append((r,c))

            while q:
                rows, cols = q.popleft() # q.pop() will act as dfs
                direction = [[1,0], [-1,0],[0,1],[0,-1]]
                for dr, dc in direction:
                    r, c = rows+dr, cols+dc
                    if (r in range(row) and c in range(col) and (r,c) not in visit and  grid[r][c] == "1"):
                        q.append((r,c))
                        visit.add((r,c))


        for r in range(row):
            for c in range(col):
                if grid[r][c]=="1" and (r,c) not in visit:
                    bfs(r,c)
                    result += 1
        return result
                    

"""

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0
        result = 0
        def dfs(r,c):
            if r>=0 and c >= 0 and r<len(grid) and c<len(grid[0]) and grid[r][c] == "1":
                grid[r][c] = "0"
                dfs(r,c+1)
                dfs(r,c-1)
                dfs(r+1,c)
                dfs(r-1,c)
            else:
                return 


        for r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c] == "1":
                    dfs(r,c)
                    result += 1
        return result

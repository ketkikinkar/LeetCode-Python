"""
3. Longest Substring Without Repeating Characters
Medium
33.3K
1.5K
company
Bloomberg
company
Amazon
company
Google
Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
"""

#SOLUTION:

class Solution:  
    def lengthOfLongestSubstring(self, s):
        charset = set()
        left = 0
        ans = 0
        for right in range(len(s)):
            while s[right] in charset:
                charset.remove(s[left])
                left += 1
            charset.add(s[right])
            ans = max(ans,right-left+1)
        return ans

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        l = 0
        longest = 0
        sett = set()
        #O(n)
        for r in range(len(s)):
            while s[r] in sett: # while we are looking are invalid substring
                sett.remove(s[l])
                l += 1
            w = (r-l+1)
            longest = max(longest,w)
            sett.add(s[r])
        return longest



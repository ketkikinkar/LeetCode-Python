54. Spiral Matrix

Solved
Medium
Topics
Companies
Hint
Given an m x n matrix, return all elements of the matrix in spiral order.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100
Seen this question in a real interview before?
1/5
Yes
No
Accepted
1.8M
Submissions
3.5M
Acceptance Rate
53.2%
Topics
Array
Matrix
Simulation

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        result = []
        r, c = len(matrix), len(matrix[0])
        up = left =0
        right = c - 1
        down = r -1

        while len(result) < r * c:
            # Traverse from left to right
            for col in range(left, right +1):
                result.append(matrix[up][col])
            # Traverse downwards
            for rows in range(up+1,down+1):
                result.append(matrix[rows][right])
            # Now we are in a different row
            if up!= down:
                # Traverse from right to left
                for col in range(right-1, left-1, -1):
                    result.append(matrix[down][col])
            # Now we are in different col
            if left!=right:
                for row in range(down-1,up,-1):
                    result.append(matrix[row][left])
            left+=1
            right-=1
            up+=1
            down-=1
        return result

"""
Time complexity: O(Mâ‹…N). This is because we visit each element once.

Space complexity: O(1). This is because we don't use other data structures. Remember that we don't include the output array in the space complexity."""

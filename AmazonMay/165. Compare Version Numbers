165. Compare Version Numbers
Given two version strings, version1 and version2, compare them. A version string consists of revisions separated by dots '.'. The value of the revision is its integer conversion ignoring leading zeros.

To compare version strings, compare their revision values in left-to-right order. If one of the version strings has fewer revisions, treat the missing revision values as 0.

Return the following:

If version1 < version2, return -1.
If version1 > version2, return 1.
Otherwise, return 0.
 

Example 1:

Input: version1 = "1.2", version2 = "1.10"

Output: -1

Explanation:

version1's second revision is "2" and version2's second revision is "10": 2 < 10, so version1 < version2.

Example 2:

Input: version1 = "1.01", version2 = "1.001"

Output: 0

Explanation:

Ignoring leading zeroes, both "01" and "001" represent the same integer "1".

Example 3:

Input: version1 = "1.0", version2 = "1.0.0.0"

Output: 0

Explanation:

version1 has less revisions, which means every missing revision are treated as "0".

 

Constraints:

1 <= version1.length, version2.length <= 500
version1 and version2 only contain digits and '.'.
version1 and version2 are valid version numbers.
All the given revisions in version1 and version2 can be stored in a 32-bit integer.
Seen this question in a real interview before?
1/5
Yes
No
Accepted
547,041/1.3M
Acceptance Rate
42.3%

class Solution:
    def compareVersion(self, version1: str, version2: str) -> int:
        v1 = version1.split(".")
        v2 = version2.split(".")
        L1 = len(v1)
        L2 = len(v2)
        for i in range(max(L1,L2)):
            n1 = 0 if i>=L1 else int(v1[i])
            n2 = 0 if i>=L2 else int(v2[i])
            if n1>n2:
                return 1
            elif n1<n2:
                return -1
        return 0
"""
Time Complexity:

Best Case: O(min(N, M)) – where N and M are the number of components in version1 and version2 respectively, and a difference is found early.

Average Case: O(max(N, M)) – all components are compared.

Worst Case: O(max(N, M)) – if both versions are fully compared and found equal.

Space Complexity:

O(N + M) – for storing the split strings v1 and v2.

How to Explain in an Interview
"I split both version strings by '.', creating arrays of numeric strings. I then iterate through the longer of the two arrays, comparing each corresponding integer. If one version is longer, I treat missing parts in the shorter one as 0. This method handles versions of different lengths and ensures accurate comparisons. The logic exits early if a difference is found, optimizing for performance."
"""

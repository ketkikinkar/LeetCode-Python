49. Group Anagrams
Medium
Topics
conpanies icon
Companies
Given an array of strings strs, group the anagrams together. You can return the answer in any order.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]

Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Explanation:

There is no string in strs that can be rearranged to form "bat".
The strings "nat" and "tan" are anagrams as they can be rearranged to form each other.
The strings "ate", "eat", and "tea" are anagrams as they can be rearranged to form each other.
Example 2:

Input: strs = [""]

Output: [[""]]

Example 3:

Input: strs = ["a"]

Output: [["a"]]
Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.
Seen this question in a real interview before?
1/5
Yes
No
Accepted
3,793,943/5.4M
Acceptance Rate
70.8%

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        res = defaultdict(list)
        for s in strs:
            count = [0]*26 # a b c d .. z
            for c in s:
                count[ord(c)-ord("a")]+=1
            res[tuple(count)].append(s)
        return list(res.values())
"""
Space and Time Complexity:

Best Case Time Complexity: O(N * K)

Average Case Time Complexity: O(N * K)

Worst Case Time Complexity: O(N * K)

Where N is the number of strings in the input list, and K is the maximum length of a string.

Space Complexity: O(N * K)

Due to the storage of character count tuples and the final grouped anagrams list.

How to explain this in an interview:

"This solution groups anagrams by creating a fixed-size frequency count (26 letters for lowercase English) for each word, treating that as a key in a hashmap. Anagrams will have the same frequency signature, hence grouped together. This avoids the overhead of sorting, leading to a more optimal O(NK) time compared to O(NK log K) if we used sorting."

In Python, ord(c) returns the Unicode code point (integer value) of the character c.
"""

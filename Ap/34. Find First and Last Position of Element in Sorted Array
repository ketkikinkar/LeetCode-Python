34. Find First and Last Position of Element in Sorted Array

Medium
Topics
Companies
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109
Seen this question in a real interview before?
1/5
Yes
No
Accepted
2.6M
Submissions
5.6M
Acceptance Rate
46.4%

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        left = self.binSearch(nums,target,True)
        right = self.binSearch(nums,target,False)
        return [left,right]
    def binSearch(self, nums, target, leftBias):
        l, r = 0, len(nums)-1
        i= -1
        while l<=r:
            mid = (l+r)//2
            if nums[mid] < target:
                l = mid+1
            elif nums[mid] > target:
                r = mid - 1
            else: 
                i = mid
                if leftBias:
                    r = mid-1
                else:
                    l = mid+1
        return i
        # T O(log n); SO(1)

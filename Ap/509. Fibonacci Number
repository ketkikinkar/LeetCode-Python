509. Fibonacci Number
Solved
Easy
Topics
Companies
The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

 

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 3:

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
 

Constraints:

0 <= n <= 30
Seen this question in a real interview before?
1/5
Yes
No
Accepted
2.3M
Submissions
3.2M
Acceptance Rate
72.7%

class Solution:
    cache = {0:0,1:1}
    def fib(self, n: int) -> int:
        # if n<2: return n
        # res = 0
        # prev, cur = 0, 1
        # for i in range(2,n+1):
        #     res = prev + cur
        #     prev = cur
        #     cur = res
        # return res
        # T O(n) ; S O(1) Iterative bottom up

        # golden_ratio = (1+5**0.5)/2
        # return int(round((golden_ratio**n)/5**0.5))
        # T O(logn) raising the golden_ratio to the power of N requires O(logN) time.
        # S O(1) math

        if n in self.cache:
            return self.cache[n]
        self.cache[n] = self.fib(n-1) + self.fib(n-2)
        return self.cache[n]
        # T O(n)
        # S O(n)


        

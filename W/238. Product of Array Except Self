"""
238. Product of Array Except Self

Medium
Topics
Companies
Hint
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)


Seen this question in a real interview before?
1/5
Yes
No
Accepted
3.4M
Submissions
5.1M
Acceptance Rate
67.4%
Topics
Companies
Hint 1
Think how you can efficiently utilize prefix and suffix products to calculate the product of all elements except self for each index. Can you pre-compute the prefix and suffix products in linear time to avoid redundant calculations?
Hint 2
Can you minimize additional space usage by reusing memory or modifying the input array to store intermediate results?
"""

# SOLTUION:

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        res = [1]*len(nums)
        prefix, postfix = 1, 1
        for i in range(len(nums)):
            res[i] *= prefix
            prefix *= nums[i]
            
            res[len(nums)-i-1] *= postfix
            postfix *= nums[len(nums)-i-1]
        return res
        """
        Time Complexity: O(n)

The algorithm makes a single pass through the array with one for-loop that iterates through all n elements.
Within each iteration, all operations (multiplication and assignment) are constant time.
The total number of operations scales linearly with the input size.

Space Complexity: O(1) (excluding output space)

If we exclude the output array res (which is required to store the result), the algorithm only uses two additional variables: prefix and postfix.
These variables use constant space regardless of input size.
Note: If we count the output array, then the space complexity would be O(n)."""

# SOLTUION:

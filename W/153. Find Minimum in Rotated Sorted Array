"""
153. Find Minimum in Rotated Sorted Array https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/

153. Find Minimum in Rotated Sorted Array
Attempted
Medium
Topics
Companies
Hint
Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 
 

Constraints:

n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
All the integers of nums are unique.
nums is sorted and rotated between 1 and n times.

Seen this question in a real interview before?
1/5
Yes
No
Accepted
2.3M
Submissions
4.4M
Acceptance Rate
52.2%
Topics
Array
Binary Search
"""

# SOLTUION:

class Solution:
    def findMin(self, nums: List[int]) -> int:
        res = nums[0]
        l, r = 0, len(nums)-1
        if nums[l]<nums[r]:
            return res
        while l<=r:
            m = (l+r) // 2
            if nums[m] < nums[m-1]:
                return nums[m]
            if m < len(nums)-1 and nums[m] > nums[m+1]:
                return nums[m+1]
            if nums[m] >= nums[l]:
                l = m + 1
            else:
                r = m - 1
        return res
        """
        Time Complexity: O(log n)

This algorithm uses a modified binary search approach that divides the search space in half with each iteration.
For each iteration, the algorithm checks specific conditions to find the inflection point (where the array transitions from higher to lower values).
Since the search space is halved in each iteration, the maximum number of iterations is logarithmic with respect to the input size.
Therefore, the time complexity is O(log n), where n is the length of the input array nums.

Space Complexity: O(1)

The algorithm uses only a fixed number of variables (res, l, r, m) regardless of the input size.
No additional data structures that scale with input size are created.
The space used remains constant regardless of the array's length."""


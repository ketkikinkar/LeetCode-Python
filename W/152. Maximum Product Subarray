"""
152. Maximum Product Subarray https://leetcode.com/problems/maximum-product-subarray/description/
Dynamic programming
152. Maximum Product Subarray
Solved
Medium
Topics
Companies
Given an integer array nums, find a subarray that has the largest product, and return the product.
The test cases are generated so that the answer will fit in a 32-bit integer.

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
Constraints:
1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any subarray of nums is guaranteed to fit in a 32-bit integer.

Seen this question in a real interview before?
1/5
Yes
No
Accepted
1.6M
Submissions
4.5M
Acceptance Rate
34.5%
Topics
Array
Dynamic Programming
"""

# SOLUTION:
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        res = max(nums)
        curMax, curMin = 1, 1

        for n in nums:
            tmp = n * curMax
            curMax = max(n*curMax, n*curMin, n)
            curMin = min(tmp, n*curMin, n)
            res = max(res, curMax)
        return res
        """
        Time Complexity: O(n)
The algorithm performs a single pass through the input array nums with one for loop.
Inside the loop, all operations (multiplication, min/max comparisons) are O(1) constant time operations.
Therefore, the overall time complexity is O(n), where n is the length of the input array.
Space Complexity: O(1)
The algorithm uses only a fixed number of variables (res, curMax, curMin, tmp) regardless of input size.
No additional data structures that scale with the input size are created.
The space used remains constant regardless of the array's length.
This algorithm efficiently tracks both the maximum and minimum products at each step (the minimum is tracked because multiplying by a negative number can turn a minimum into a maximum) to find the maximum product subarray in linear time with constant space. """


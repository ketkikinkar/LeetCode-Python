"""
167. Two Sum II - Input Array Is Sorted https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/
167. Two Sum II - Input Array Is Sorted
Solved
Medium
Topics
Companies
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
 

Constraints:

2 <= numbers.length <= 3 * 104
-1000 <= numbers[i] <= 1000
numbers is sorted in non-decreasing order.
-1000 <= target <= 1000
The tests are generated such that there is exactly one solution.

Seen this question in a real interview before?
1/5
Yes
No
Accepted
2.6M
Submissions
4.1M
Acceptance Rate
62.9%
Topics
Array
Two Pointers
Binary Search
"""

# SOLTUION:

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        l, r = 0, len(numbers) - 1
        while l < r:
            currSum = numbers[l] + numbers[r]
            if currSum > target:
                r -= 1
            elif currSum < target:
                l += 1
            else:
                return [l+1,r+1]
    """ 
    Time Complexity: O(n)

The algorithm uses a two-pointer approach that makes a single pass through the array.
The pointers (l and r) start at opposite ends of the array and move toward each other.
In the worst case, we examine each element at most once, resulting in linear time complexity.

Space Complexity: O(1)

The algorithm uses only a constant amount of extra space regardless of input size.
It maintains just two integer variables (l and r) as pointers and doesn't create any data structures that grow with input size.

This two-pointer approach is efficient for sorted arrays, as it leverages the sorted property to eliminate portions of the search space at each step. """

"""
42. Trapping Rain Water

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.
Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105
"""
class Solution:
    def trap(self, height: List[int]) -> int:
        if not height:
            return o
        l, r = 0, len(height)-1
        res = 0
        leftMax, rightMax = height[l], height[r]
        while l<r:
            if leftMax < rightMax:
                l+=1
                leftMax = max(leftMax, height[l])
                res+= leftMax -height[l]
            else:
                r-=1
                rightMax = max(rightMax,height[r])
                res += rightMax-height[r]
        return res
    
"""
Time Complexity
O(n): The solution involves a single pass through the height array using two pointers (l and r) that start at opposite ends of the array and move towards each other. Each pointer only moves from one end of the array to the other (from the leftmost to the rightmost, and from the rightmost to the leftmost, respectively), resulting in a linear traversal of the array.

Space Complexity
O(1): The space complexity is constant because the solution uses only a few additional variables (l, r, leftMax, rightMax, and res) and does not require any extra space that scales with the size of the input array.

This efficiency in both time and space makes the two-pointer method highly suitable for solving the trapping rain water problem, especially for large input sizes where minimizing memory usage is crucial.
"""

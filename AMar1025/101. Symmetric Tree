"""
101. Symmetric Tree https://leetcode.com/problems/symmetric-tree/description/

Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).
Example 1:
Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:
Input: root = [1,2,2,null,3,null,3]
Output: false
Constraints:
The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100

Follow up: Could you solve it both recursively and iteratively?
"""

# SOLTUION:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        def dfs(left, right):
            if not left and not right:
                return True
            if not left or not right:
                return False
            return ((left.val == right.val) and
                   dfs(left.left, right.right) and
                   dfs(left.right, right.left))
        return dfs(root.left,root.right)
    
"""
The Python code you provided defines a function isSymmetric that checks whether a binary tree is symmetric around its center, meaning the left subtree is a mirror reflection of the right subtree.


isSymmetric(root): Initiates a recursive function dfs(left, right) to compare the left and right subtrees of the root.
Recursive Function - dfs(left, right):

It returns True if both nodes are null, indicating symmetry in this part of the tree.
Returns False if one of the nodes is null and the other is not, indicating asymmetry.
Checks if the values of the nodes are the same and then recursively checks:
The left child of the left subtree with the right child of the right subtree.
The right child of the left subtree with the left child of the right subtree.
Complexity:
Time Complexity: O(n), where n is the number of nodes, as each node is visited once.
Space Complexity: O(h), where h is the height of the tree, due to recursion depth.
This function efficiently verifies tree symmetry by recursively comparing corresponding nodes in each subtree to ensure they mirror each other.
"""

"""
        if not root:
            return True
        
        queue = deque([(root.left, root.right)])
        
        while queue:
            left, right = queue.popleft()
            
            # If both nodes are None, continue without adding anything to the queue
            if not left and not right:
                continue
            
            # If one of them is None but not both, or their values are not equal, return False
            if not left or not right or left.val != right.val:
                return False
            
            # Add the children nodes in the opposite order for comparison
            queue.append((left.left, right.right))
            queue.append((left.right, right.left))
        
        return True
"""

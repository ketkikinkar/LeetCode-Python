"""
56. Merge Intervals
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104
"""

# SOLTUION:

class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        res = []
        l, r = 0, 1
        intervals.sort()
        while l<len(intervals):
            if r < len(intervals) and intervals[l][1]>=intervals[r][0]:
                if intervals[l][1]<intervals[r][1]:
                    intervals[r]=[intervals[l][0],intervals[r][1]]
                else:
                    intervals[r]=[intervals[l][0],intervals[l][1]]
                l=r
                r+=1
            else:
                res.append(intervals[l])
                l+=1
                r+=1
        return res
                
        # TO(nlogn)
        # S O(n)

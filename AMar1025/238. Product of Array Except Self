"""
238. Product of Array Except Self https://leetcode.com/problems/product-of-array-except-self/description/
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.
Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

Constraints:
2 <= nums.length <= 105
-30 <= nums[i] <= 30
The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)

   Hide Hint #1  
Think how you can efficiently utilize prefix and suffix products to calculate the product of all elements except self for each index. Can you pre-compute the prefix and suffix products in linear time to avoid redundant calculations?
   Hide Hint #2  
Can you minimize additional space usage by reusing memory or modifying the input array to store intermediate results?
"""

# SOLUTION:

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        res = [1]*len(nums)
        prefix, postfix = 1, 1
        for i in range(len(nums)):
            res[i] *= prefix
            prefix *= nums[i]
            
            res[len(nums)-i-1] *= postfix
            postfix *= nums[len(nums)-i-1]
        return res
        """
        Time Complexity: O(n)

The algorithm makes a single pass through the array with one for-loop that iterates through all n elements.
Within each iteration, all operations (multiplication and assignment) are constant time.
The total number of operations scales linearly with the input size.

Space Complexity: O(1) (excluding output space)

If we exclude the output array res (which is required to store the result), the algorithm only uses two additional variables: prefix and postfix.
These variables use constant space regardless of input size.
Note: If we count the output array, then the space complexity would be O(n)."""
        
"""
Product of Array Except Self' problem, where we need to return an array such that each element at index i is the product of all the elements in the original array except the element at i. Importantly, the solution must operate in O(n) time complexity and without using division."

Clarifying the Approach: "The core idea is to use two arrays or concepts: one to keep track of all the products to the left (prefix) of each index, and another for the products to the right (postfix) of each index. However, I optimized the space usage by using just two variables and modifying the result array in place."

Step-by-Step Code Walkthrough:

Initialization: "First, I initialize the result array res with 1s. This array will eventually hold the final products for each index. I also set up two variables, prefix and postfix, both initialized to 1. These will be used to calculate the product of all elements to the left and right of each index, respectively."

First Loop - Building Prefix Products: "I start by iterating through the array from the beginning to the end. In each iteration, I update res[i] by multiplying it with prefix, which currently contains the product of all elements before i. After updating res[i], I update prefix by multiplying it with nums[i], so it's ready with the product for the next index in the upcoming iterations."

Second Loop - Building Postfix Products: "After the first loop, prefix has given us partial products in res. Now, I iterate from the end of the array to the beginning. Here, I update res[i] again, this time multiplying it with postfix, which accumulates the product of all elements after i. Post updating res[i], I update postfix by multiplying it with nums[i]

"""

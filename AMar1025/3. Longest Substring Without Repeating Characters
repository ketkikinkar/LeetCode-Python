"""
3. Longest Substring Without Repeating Characters https://leetcode.com/problems/longest-substring-without-repeating-characters/description/
Solution
Given a string s, find the length of the longest substring without duplicate characters.
Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
   Hide Hint #1  
Generate all possible substrings & check for each substring if it's valid and keep updating maxLen accordingly.
"""

# SOLTUION:

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        charSet = set()
        l = 0
        res = 0
        for r in range(len(s)):
            while s[r] in charSet:
                charSet.remove(s[l])
                l += 1
            charSet.add(s[r])
            res= max(res,len(charSet))
        return res
    
    """3. Walk Through the Solution Approach

"My approach utilizes a sliding window to explore potential substrings. The window is defined by two pointers, l (left) and r (right), which represent the bounds of our current substring."
"As I iterate through the string with the right pointer r, I check if the character is already in our current window using a set called charSet. If it is, it means we have a duplicate, and I need to shrink the window from the left by moving the l pointer rightwards, removing characters from the set until the duplicate is removed."
"If the character at position r is not in the set, I add it to the set and update the result res to keep track of the maximum length found so far."
"The loop continues until the right pointer has processed every character in the string."

4. Discuss Time and Space Complexity
Make sure to discuss the efficiencies:

"In terms of time complexity, this solution operates in O(n) time, where n is the length of the string. This is because each character is considered at most twice, once by the right pointer and once by the left pointer."
"The space complexity is O(min(n, m)), where m is the size of the character set (e.g., 256 for extended ASCII). This space is used to store the characters of the current window in a set."""
    
    """
    Before I start coding, would you like me to explain my approach first?
    Can I assume the input will always be a valid string, or should I handle edge cases like null or empty strings?
    """
       

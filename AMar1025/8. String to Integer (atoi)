"""
8. String to Integer (atoi) https://leetcode.com/problems/string-to-integer-atoi/description/

Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.

The algorithm for myAtoi(string s) is as follows:

Whitespace: Ignore any leading whitespace (" ").
Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity if neither present.
Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.
Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.
Return the integer as the final result.

Example 1:

Input: s = "42"

Output: 42

Explanation:

The underlined characters are what is read in and the caret is the current reader position.
Step 1: "42" (no characters read because there is no leading whitespace)
         ^
Step 2: "42" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "42" ("42" is read in)
           ^
Example 2:

Input: s = " -042"

Output: -42

Explanation:

Step 1: "   -042" (leading whitespace is read and ignored)
            ^
Step 2: "   -042" ('-' is read, so the result should be negative)
             ^
Step 3: "   -042" ("042" is read in, leading zeros ignored in the result)
               ^
Example 3:

Input: s = "1337c0d3"

Output: 1337

Explanation:

Step 1: "1337c0d3" (no characters read because there is no leading whitespace)
         ^
Step 2: "1337c0d3" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "1337c0d3" ("1337" is read in; reading stops because the next character is a non-digit)
             ^
Example 4:

Input: s = "0-1"

Output: 0

Explanation:

Step 1: "0-1" (no characters read because there is no leading whitespace)
         ^
Step 2: "0-1" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "0-1" ("0" is read in; reading stops because the next character is a non-digit)
          ^
Example 5:

Input: s = "words and 987"

Output: 0

Explanation:

Reading stops at the first non-digit character 'w'.

Constraints:

0 <= s.length <= 200
s consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.
"""

# SOLTUION:

class Solution:
    def myAtoi(self, s: str) -> int:
        sign = 1
        result = 0
        index = 0
        n = len(s)
        INT_MAX = pow(2,31)-1
        INT_MIN = pow(2,31)

        # Disard all spaces from the begining of the input string
        while index < n and s[index] == " ":
            index += 1

        # sign = +1 of it's positive number otherwise sign = -1
        if index < n and s[index] == "+":
            sign = 1
            index += 1
        elif index<n and s[index] == "-":
            sign = -1
            index +=1
        # Traverse next digits of input and stop if it is not a digit
        # End of string is also non-digit charecter
        while index < n and s[index].isdigit():
            digit = int(s[index])
            # check overflow and underflow conditions
            if (result > INT_MAX // 10) or (result == INT_MAX//10 and digit>INT_MAX%10 ):
                return INT_MAX if sign == 1 else sign*INT_MIN
            # APPEND current digit to result
            result = 10*result +digit
            index+=1
        return sign*result
        """
        If N is the number of characters in the input string.

Time complexity: O(N)

We visit each character in the input at most once and for each character we spend a constant amount of time.

Space complexity: O(1)

We have used only constant space to store the sign and the result."""
        

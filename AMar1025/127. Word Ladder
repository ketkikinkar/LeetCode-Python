"""
127. Word Ladder https://leetcode.com/problems/word-ladder/description/
A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

Example 1:
Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.
Example 2:
Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
Constraints:

1 <= beginWord.length <= 10
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.
"""

# SOLUTION:

class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        if endWord not in wordList:
            return 0
        wordList.append(beginWord)
        nei = collections.defaultdict(list)
        for word in wordList:
            for j in range(len(word)):
                pattern = word[:j]+"*"+word[j+1:]
                nei[pattern].append(word)
        visit = set([beginWord])
        q = deque([beginWord])
        res = 1
        while q:
            for i in range(len(q)):
                word = q.popleft()
                if word == endWord:
                    return res
                for j in range(len(word)):
                    pattern = word[:j]+"*"+word[j+1:]
                    for neiWord in nei[pattern]:
                        if neiWord not in visit:
                            visit.add(neiWord)
                            q.append(neiWord)
            res += 1
        return 0
"""
Code Walkthrough:
Initial Check:

If endWord is not in wordList, immediately return 0 since it's impossible to transform beginWord into endWord.
Prepare Data Structures:

nei: A defaultdict of lists that maps each pattern (word with one letter replaced by *) to all words that can be formed from that pattern.
visit: A set to keep track of visited words to avoid revisiting and looping.
q: A deque initialized with beginWord used for BFS traversal.
Pattern Creation:

The loop iterates through each word in the word list (including the beginWord), and for each word, it generates patterns by replacing each letter with *. Each pattern points to all words that match the pattern.
Breadth-First Search (BFS):

Starts with beginWord and attempts to reach endWord while counting the number of transformation steps (res).
For each word dequeued, if it matches endWord, the current count res is returned.
If not, the code explores all possible one-letter transformations of the current word, enqueues them if they haven't been visited, and marks them as visited.
Return Result:

If the queue is exhausted without finding endWord, the function returns the count of transformation steps. If no valid transformation exists, it returns 0.
Time Complexity: O(N * L^2)
N is the number of words in the wordList, and L is the length of each word.
Generating patterns for each word involves replacing each of its L letters (L operations) and each operation involves creating a substring which is O(L), making it O(L^2) for each word.
The BFS could potentially visit all words, and for each word, it considers all possible L patterns.
Space Complexity: O(N * L)
The nei dictionary might need to store up to N words, each associated with up to L patterns.
The BFS queue (q) and the visited set (visit) store at most N elements, each requiring space proportional to the length of the word.
Explanation of Complexities:
The primary driver of time complexity is the double loop through each word and each character in the word, while space complexity is driven by the storage of transformation sequences and the BFS structure.
"""

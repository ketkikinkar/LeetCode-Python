"""
98. Validate Binary Search Tree https://leetcode.com/problems/validate-binary-search-tree/description/
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:
Input: root = [2,1,3]
Output: true
Example 2:
Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

Constraints:
The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1
"""

# SOLTUION:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        def valid(node, left, right):
            if not node:
                return True
            if not (node.val > left and node.val < right):
                return False
            return (valid(node.left,left,node.val) and valid(node.right,node.val,right))
        return valid(root,float("-inf"),float("inf"))

"""
How would you handle duplicate values in the tree? Depending on the definition of the BST, typically, either duplicates are not allowed, or they must all be either strictly on the left or strictly on the right.

he provided Python code defines a method to check if a binary tree is a valid binary search tree (BST). The method, isValidBST, uses a recursive helper function, valid, which ensures that every node's value is within the correct range defined by its parent nodes. This range is initially set to negative and positive infinity for the root.

The valid function checks if the current node's value is greater than the allowed minimum (left) and less than the allowed maximum (right). If either condition fails, the tree isn't a valid BST. It recursively applies these checks to left and right children, adjusting the allowed value range.

The solution has a time complexity of O(n), where n is the number of nodes in the tree (each node is checked once), and a space complexity of O(h), where h is the height of the tree, accounting for the recursion stack.
"""

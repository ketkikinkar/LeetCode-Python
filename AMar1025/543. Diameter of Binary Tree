"""
543. Diameter of Binary Tree https://leetcode.com/problems/diameter-of-binary-tree/description/
Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.
Example 1:
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].
Example 2:
Input: root = [1,2]
Output: 1
Constraints:

The number of nodes in the tree is in the range [1, 104].
-100 <= Node.val <= 100
"""

# SOLTUION:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        self.res = 0
        
        def dfs(cur):
            if not cur:
                return 0
            left = dfs(cur.left)
            right = dfs(cur.right)
            
            self.res = max(self.res,left+right)
            return 1+max(left,right)
        dfs(root)
        return self.res
    
"""
Initialization:

self.res is initialized to 0. This variable will keep track of the maximum diameter found during the DFS (Depth First Search) traversal of the tree.
Nested Function: dfs

dfs(cur): A helper function defined inside diameterOfBinaryTree that performs a DFS on the tree starting from node cur.
If cur is None (i.e., the node is empty), it returns 0. This is the base case for the recursion.
It recursively calls itself for the left child (left = dfs(cur.left)) and the right child (right = dfs(cur.right)).
After getting the heights (left and right) of the left and right subtrees, it updates self.res to be the maximum of its current value and the sum of left and right. This sum represents the diameter at the current node (cur), encompassing paths that go through both left and right children.
Finally, it returns 1 + max(left, right), which represents the height of the tree at the current node.
Final Calculation:

The dfs function is initially called with the root of the tree.
After the DFS completes, self.res holds the maximum diameter of the tree, which is then returned.
Time Complexity
The time complexity of this method is O(N), where N is the number of nodes in the tree. Each node is visited exactly once during the DFS traversal.

Space Complexity
The space complexity is O(H), where H is the height of the tree. This space is used by the recursion stack. In the worst case, if the tree is skewed (like a linked list), the height could be N, making the space complexity O(N).
"""

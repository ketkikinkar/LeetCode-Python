"""
273. Integer to English Words
Convert a non-negative integer num to its English words representation.

 

Example 1:

Input: num = 123
Output: "One Hundred Twenty Three"
Example 2:

Input: num = 12345
Output: "Twelve Thousand Three Hundred Forty Five"
Example 3:

Input: num = 1234567
Output: "One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"
 

Constraints:

0 <= num <= 231 - 1
   Hide Hint #1  
Did you see a pattern in dividing the number into chunk of words? For example, 123 and 123000.
   Hide Hint #2  
Group the number by thousands (3 digits). You can write a helper function that takes a number less than 1000 and convert just that chunk to words.
   Hide Hint #3  
There are many edge cases. What are some good test cases? Does your code work with input such as 0? Or 1000010? (middle chunk is zero and should not be printed out)"""

# SOLTUION:

class Solution:
    def numberToWords(self, num: int) -> str:
        if num == 0:
            return "Zero"
        ones = ["", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"]
        tens = ["", "", "Twenty","Thirty","Forty","Fifty", "Sixty", "Seventy","Eighty", "Ninety"]
        thousands = ["", "Thousand", "Million", "Billion"]
        result = ""
        group_index = 0
        while num:
            if num%1000!=0:
                group_result = ""
                part = num%1000
                if part >= 100:
                    group_result += ones[part//100] + " Hundred "
                    part %= 100
                    
                if part >=20:
                    group_result += tens[part//10]+ " "
                    part %=10
                if part >0:
                    group_result += ones[part] + " "
                group_result += thousands[group_index] + " "
                result = group_result + result
            num//=1000
            group_index+=1
        return result.strip()
    """
Let N be the number.

Time complexity: O(log 10 baseN)

O(log 10 baseN), because the number is divided by 1000 in each iteration, making the number of iterations proportional to the number of chunks, which is logarithmic.

Space complexity: O(1)

O(1), constant space. The space used is independent of the number's size, as it involves only a few string builders and arrays.
    """
